# automatically generated by the FlatBuffers compiler, do not modify

# namespace: mmc

import flatbuffers

class CoupleWeight(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCoupleWeight(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CoupleWeight()
        x.Init(buf, n + offset)
        return x

    # CoupleWeight
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CoupleWeight
    def CoupleId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CoupleWeight
    def GroupIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CoupleWeight
    def GroupIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CoupleWeight
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # CoupleWeight
    def Memory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def CoupleWeightStart(builder): builder.StartObject(4)
def CoupleWeightAddCoupleId(builder, coupleId): builder.PrependUint32Slot(0, coupleId, 0)
def CoupleWeightAddGroupIds(builder, groupIds): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(groupIds), 0)
def CoupleWeightStartGroupIdsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CoupleWeightAddWeight(builder, weight): builder.PrependUint64Slot(2, weight, 0)
def CoupleWeightAddMemory(builder, memory): builder.PrependUint64Slot(3, memory, 0)
def CoupleWeightEnd(builder): return builder.EndObject()
