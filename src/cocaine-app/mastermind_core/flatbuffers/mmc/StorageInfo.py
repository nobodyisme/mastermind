# automatically generated by the FlatBuffers compiler, do not modify

# namespace: mmc

import flatbuffers

class StorageInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsStorageInfo(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StorageInfo()
        x.Init(buf, n + offset)
        return x

    # StorageInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StorageInfo
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # StorageInfo
    def Namespaces(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Namespace import Namespace
            obj = Namespace()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StorageInfo
    def NamespacesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StorageInfo
    def UnitMapping(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .UnitToCouples import UnitToCouples
            obj = UnitToCouples()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StorageInfo
    def UnitMappingLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def StorageInfoStart(builder): builder.StartObject(3)
def StorageInfoAddTimestamp(builder, timestamp): builder.PrependUint64Slot(0, timestamp, 0)
def StorageInfoAddNamespaces(builder, namespaces): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(namespaces), 0)
def StorageInfoStartNamespacesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StorageInfoAddUnitMapping(builder, unitMapping): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(unitMapping), 0)
def StorageInfoStartUnitMappingVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StorageInfoEnd(builder): return builder.EndObject()
