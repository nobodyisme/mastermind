# automatically generated by the FlatBuffers compiler, do not modify

# namespace: mmc

import flatbuffers

class Statistics(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsStatistics(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Statistics()
        x.Init(buf, n + offset)
        return x

    # Statistics
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Statistics
    def IsFull(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # Statistics
    def RawData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

def StatisticsStart(builder): builder.StartObject(2)
def StatisticsAddIsFull(builder, isFull): builder.PrependBoolSlot(0, isFull, 0)
def StatisticsAddRawData(builder, rawData): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rawData), 0)
def StatisticsEnd(builder): return builder.EndObject()
