# automatically generated by the FlatBuffers compiler, do not modify

# namespace: mmc

import flatbuffers

class NamespaceSettings(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsNamespaceSettings(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NamespaceSettings()
        x.Init(buf, n + offset)
        return x

    # NamespaceSettings
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NamespaceSettings
    def ReplicaCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NamespaceSettings
    def SuccessCopiesNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # NamespaceSettings
    def StaticCouple(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # NamespaceSettings
    def StaticCoupleLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NamespaceSettings
    def UserSettings(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

def NamespaceSettingsStart(builder): builder.StartObject(4)
def NamespaceSettingsAddReplicaCount(builder, replicaCount): builder.PrependUint32Slot(0, replicaCount, 0)
def NamespaceSettingsAddSuccessCopiesNum(builder, successCopiesNum): builder.PrependInt8Slot(1, successCopiesNum, 0)
def NamespaceSettingsAddStaticCouple(builder, staticCouple): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(staticCouple), 0)
def NamespaceSettingsStartStaticCoupleVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NamespaceSettingsAddUserSettings(builder, userSettings): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(userSettings), 0)
def NamespaceSettingsEnd(builder): return builder.EndObject()
