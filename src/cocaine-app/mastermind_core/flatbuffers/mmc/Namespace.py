# automatically generated by the FlatBuffers compiler, do not modify

# namespace: mmc

import flatbuffers

class Namespace(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsNamespace(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Namespace()
        x.Init(buf, n + offset)
        return x

    # Namespace
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Namespace
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # Namespace
    def Deleted(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # Namespace
    def Couples(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Couple import Couple
            obj = Couple()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Namespace
    def CouplesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Namespace
    def Settings(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .NamespaceSettings import NamespaceSettings
            obj = NamespaceSettings()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Namespace
    def Statistics(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Statistics import Statistics
            obj = Statistics()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Namespace
    def CoupleWeights(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .CoupleWeight import CoupleWeight
            obj = CoupleWeight()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Namespace
    def CoupleWeightsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def NamespaceStart(builder): builder.StartObject(6)
def NamespaceAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def NamespaceAddDeleted(builder, deleted): builder.PrependBoolSlot(1, deleted, 0)
def NamespaceAddCouples(builder, couples): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(couples), 0)
def NamespaceStartCouplesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NamespaceAddSettings(builder, settings): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(settings), 0)
def NamespaceAddStatistics(builder, statistics): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(statistics), 0)
def NamespaceAddCoupleWeights(builder, coupleWeights): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(coupleWeights), 0)
def NamespaceStartCoupleWeightsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NamespaceEnd(builder): return builder.EndObject()
