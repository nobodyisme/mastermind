# automatically generated by the FlatBuffers compiler, do not modify

# namespace: mmc

import flatbuffers

class Groupset(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsGroupset(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Groupset()
        x.Init(buf, n + offset)
        return x

    # Groupset
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Groupset
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Groupset
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # Groupset
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Groupset
    def SettingsType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Groupset
    def Settings(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # Groupset
    def GroupIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Groupset
    def GroupIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def GroupsetStart(builder): builder.StartObject(6)
def GroupsetAddType(builder, type): builder.PrependInt8Slot(0, type, 0)
def GroupsetAddId(builder, id): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)
def GroupsetAddStatus(builder, status): builder.PrependInt8Slot(2, status, 0)
def GroupsetAddSettingsType(builder, settingsType): builder.PrependUint8Slot(3, settingsType, 0)
def GroupsetAddSettings(builder, settings): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(settings), 0)
def GroupsetAddGroupIds(builder, groupIds): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(groupIds), 0)
def GroupsetStartGroupIdsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def GroupsetEnd(builder): return builder.EndObject()
