# automatically generated by the FlatBuffers compiler, do not modify

# namespace: mmc

import flatbuffers

class InitialRemotesInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsInitialRemotesInfo(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = InitialRemotesInfo()
        x.Init(buf, n + offset)
        return x

    # InitialRemotesInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # InitialRemotesInfo
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # InitialRemotesInfo
    def EllipticsRemotes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # InitialRemotesInfo
    def EllipticsRemotesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def InitialRemotesInfoStart(builder): builder.StartObject(2)
def InitialRemotesInfoAddTimestamp(builder, timestamp): builder.PrependUint64Slot(0, timestamp, 0)
def InitialRemotesInfoAddEllipticsRemotes(builder, ellipticsRemotes): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(ellipticsRemotes), 0)
def InitialRemotesInfoStartEllipticsRemotesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def InitialRemotesInfoEnd(builder): return builder.EndObject()
