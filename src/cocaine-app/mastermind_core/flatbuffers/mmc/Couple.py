# automatically generated by the FlatBuffers compiler, do not modify

# namespace: mmc

import flatbuffers

class Couple(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCouple(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Couple()
        x.Init(buf, n + offset)
        return x

    # Couple
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Couple
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Couple
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # Couple
    def FreeEffectiveSpace(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Couple
    def FreeReservedSpace(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Couple
    def ReadPreference(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Couple
    def ReadPreferenceLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Couple
    def Groupsets(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Groupset import Groupset
            obj = Groupset()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Couple
    def GroupsetsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def CoupleStart(builder): builder.StartObject(6)
def CoupleAddId(builder, id): builder.PrependUint32Slot(0, id, 0)
def CoupleAddStatus(builder, status): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(status), 0)
def CoupleAddFreeEffectiveSpace(builder, freeEffectiveSpace): builder.PrependUint64Slot(2, freeEffectiveSpace, 0)
def CoupleAddFreeReservedSpace(builder, freeReservedSpace): builder.PrependUint64Slot(3, freeReservedSpace, 0)
def CoupleAddReadPreference(builder, readPreference): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(readPreference), 0)
def CoupleStartReadPreferenceVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CoupleAddGroupsets(builder, groupsets): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(groupsets), 0)
def CoupleStartGroupsetsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CoupleEnd(builder): return builder.EndObject()
